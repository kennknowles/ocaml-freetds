#							-*- makefile-gmake -*-
ROOT=..
PACKAGE_NAME = "@PACKAGE_NAME@"

CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
CFLAGS = -Wall -fPIC -DOCAML_WORD_SIZE=@OCAML_WORD_SIZE@ -I'@OCAMLLIB@'

DOC_FILES = ct.mli dblib.mli
DOC_DIR = $(ROOT)/doc/html/

# Native code versions must be installed if and only if make opt was
# called previously (i.e. the files exist):
INSTALL_FILES = $(DOC_FILES) \
	$(wildcard $(addprefix freetds, .cmi .cma .cmx .a .cmxa)) \
	dllfreetds_stubs.so libfreetds_stubs.a

.PHONY: default all opt byte native
default: @OCAMLBEST@
all: byte native
opt: native
byte: freetds.cma
native: freetds.cmxa

SOURCES = ct.ml dblib.ml
STUBS = ct_c.c dblib_stubs.c

freetds.cmo: $(SOURCES:.ml=.cmo)
	$(OCAMLC) -pack -o $@ $^

$(SOURCES:.ml=.cmx): OCAMLOPT_FLAGS+=-for-pack Freetds
freetds.cmx: $(SOURCES:.ml=.cmx)
	$(OCAMLOPT) -pack -o $@ $^

freetds.cma: freetds.cmo $(STUBS:.c=.o)
	$(OCAMLMKLIB) -ocamlc $(OCAMLC) -o freetds -oc freetds_stubs \
	$^ $(LIBS)

freetds.cmxa dllfreetds_stubs.so: freetds.cmx $(STUBS:.c=.o)
	$(OCAMLMKLIB) -ocamlopt $(OCAMLOPT) -o freetds -oc freetds_stubs \
	$^ $(LIBS)

.PHONY: doc
OCAMLDOC_FLAGS += $(if $(OCAMLINCLUDES), $(addprefix -I , $(OCAMLINCLUDES)))
doc:
	if [ ! -d "$(DOC_DIR)" ]; then mkdir -p $(DOC_DIR); fi
	$(OCAMLDOC) -html -d $(DOC_DIR) $(OCAMLDOC_FLAGS) $(DOC_FILES)

.PHONY: install uninstall update
# TODO: copy HTML doc
install: META $(INSTALL_FILES)
	ocamlfind install $(PACKAGE_NAME) $^
uninstall:
	ocamlfind remove $(PACKAGE_NAME)
update:
	$(MAKE) uninstall
	$(MAKE) install

include $(ROOT)/Makefile.ocaml

clean::
	$(RM) $(wildcard *.so)

dist-clean::
	$(RM) META Makefile
